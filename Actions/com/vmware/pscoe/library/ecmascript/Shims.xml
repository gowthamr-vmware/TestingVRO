<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="Shims" result-type="Any" api-version="6.0.0" id="e7460a91-5985-4fb7-97e1-4ad4ae007d83" version="2.30.0" allowed-operations="vef" category-name="com.vmware.pscoe.library.ecmascript">
  <script encoded="false"><![CDATA[var exports = {};
/*-
 * #%L
 * ecmascript
 * %%
 * Copyright (C) 2023 VMware
 * %%
 * Build Tools for VMware Aria
 * Copyright 2023 VMware, Inc.
 *
 * This product is licensed to you under the BSD-2 license (the "License"). You may not use this product except in compliance with the BSD-2 License.
 *
 * This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
 * #L%
 */
function getPadString(sourceLength, targetLength, padString) {
    if (sourceLength > targetLength) {
        return "";
    }
    if (padString != null) {
        padString = "" + padString;
    }
    if (padString == null || !padString.length) {
        padString = " ";
    }
    var pad = "";
    var len = targetLength - sourceLength;
    for (var i = 0; i < len; i++) {
        pad += padString[i % padString.length];
    }
    return pad;
}
var Shims = /** @class */ (function () {
    function Shims() {
    }
    Shims.stringStartsWith = function (str, search, pos) {
        pos = !pos || pos < 0 ? 0 : +pos;
        return str.substring(pos, pos + search.length) === search;
    };
    Shims.stringEndsWith = function (str, search, strLen) {
        if (strLen === undefined || strLen > this.length) {
            strLen = str.length;
        }
        return str.substring(strLen - search.length, strLen) === search;
    };
    Shims.stringIncludes = function (str, search, start) {
        if (typeof start !== "number") {
            start = 0;
        }
        if (start + search.length > str.length) {
            return false;
        }
        else {
            return str.indexOf(search, start) !== -1;
        }
    };
    Shims.stringRepeat = function (str, count) {
        if (str == null) {
            throw new TypeError("Can't convert " + str + " to object");
        }
        var result = "";
        while (0 < count--) {
            result = result.concat(str);
        }
        return result;
    };
    Shims.stringPadStart = function (str, targetLength, padString) {
        return getPadString(str.length, targetLength, padString) + str;
    };
    Shims.stringPadEnd = function (str, targetLength, padString) {
        return str + getPadString(str.length, targetLength, padString);
    };
    Shims.arrayFrom = function (arrayLike, mapfn) {
        var array = arrayLike;
        if (mapfn) {
            array = array.map(mapfn);
        }
        return array;
    };
    Shims.arrayOf = function () {
        return Array.prototype.slice.call(arguments);
    };
    Shims.objectAssign = function (target) {
        if (target === null || target === undefined) {
            throw new TypeError("Cannot convert undefined or null to object");
        }
        for (var i = 1, len = arguments.length; i < len; i++) {
            var source = arguments[i];
            for (var p in source) {
                if (Object.prototype.hasOwnProperty.call(source, p)) {
                    target[p] = source[p];
                }
            }
        }
        return target;
    };
    Shims.objectValues = function (target) {
        return Object.keys(target).map(function (key) { return target[key]; });
    };
    Shims.spreadArrays = function () {
        var size = 0;
        for (var i = 0, len = arguments.length; i < len; i++) {
            size += arguments[i].length;
        }
        var result = Array(size);
        for (var k = 0, i = 0; i < len; i++) {
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
                result[k] = a[j];
            }
        }
        return result;
    };
    Shims.arrayFind = function (array, predicate) {
        for (var i = 0; i < array.length; i++) {
            if (predicate(array[i], i, array)) {
                return array[i];
            }
        }
    };
    Shims.arrayFindIndex = function (array, predicate) {
        for (var i = 0; i < array.length; i++) {
            if (predicate(array[i], i, array)) {
                return i;
            }
        }
        return -1;
    };
    Shims.arrayFill = function (array, value, start, end) {
        if (end < 0) {
            end = array.length + end * -1;
        }
        for (var i = start; i < end; i++) {
            array[i] = value;
        }
        return array;
    };
    return Shims;
}());
exports.default = Shims;
return exports;]]></script>
</dunes-script-module>